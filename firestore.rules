rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /drivers/{Drivers} {
      allow read: if getUserData().roles.hasAny(['admin', 'player']);
      allow update, write, delete, create: if getUserData().roles.hasAny(['admin']);
    }

    match /seasons/{Seasons} {
      allow read: if getUserData().roles.hasAny(['admin', 'player']);
      allow update, write, delete, create:  if getUserData().roles.hasAny(['admin']);
    }
    
    match /seasons/{Seasons}/races/{Races} {
      allow read: if getUserData().roles.hasAny(['admin', 'player']);
      allow update, write, delete, create:  if getUserData().roles.hasAny(['admin']);
    }

    match /seasons/{Seasons}/races/{Races}/bids/{Bids} {
     // allow to create bid if race is open and a bid does not already exsist 
     allow create: if getUserData().roles.hasAny(['player']) 
                    && get(/databases/$(database)/documents/seasons/$(Seasons)/races/$(Races)).data.state == 'open' 
                    && !exists(/databases/$(database)/documents/seasons/$(Seasons)/races/$(Races)/bids/$(request.auth.uid));
     allow update: if getUserData().roles.hasAny(['player']) 
                    && request.auth.uid == Bids
                    && ('submitted' in resource.data) == false
                    && notUpdating('submitted');                    
     // allow to read bids if races is waiting or closed - or if bid is your own - or read all bids if you have made your bid             
     allow read: if getUserData().roles.hasAny(['player']) 
                    && get(/databases/$(database)/documents/seasons/$(Seasons)/races/$(Races)).data.state != 'open' 
                    || getUserData().roles.hasAny(['player']) && request.auth.uid == Bids 
                    || getUserData().roles.hasAny(['player']) 
                    && exists(/databases/$(database)/documents/seasons/$(Seasons)/races/$(Races)/bids/$(request.auth.uid))
                    && get(/databases/$(database)/documents/seasons/$(Seasons)/races/$(Races)/bids/$(request.auth.uid)).data.submitted != false; 
    }

    match /players/{Players} {
      allow read: if request.auth.uid == Players 
                    || getUserData().roles.hasAny(['admin']); 
      allow update, write: if request.auth.uid == Players && notUpdating('roles') && notUpdating('uid') && notUpdating('balance')
                    || getUserData().roles.hasAny(['admin']) && notUpdating('balance') && notUpdating('uid'); 
      allow delete: if getUserData().roles.hasAny(['admin']);
      allow create: if getUserData().roles.hasAny(['admin']) || request.auth.uid != null &&  valid_create();
    }

    match /transactions/{Transactions} {
      allow read: if getUserData().roles.hasAny(['admin'])
                   || resource.data.involved.hasAny([request.auth.uid])
                   }  
    
    function getUserData() {
      return get(/databases/$(database)/documents/players/$(request.auth.uid)).data
    }
    
    function valid_create() {
        return !(request.resource.data.keys().hasAny(['roles','balance']));
    }
    
    function notUpdating(field) {
      // prevent update of specific document data object - like roles 
      return !(field in request.resource.data) || resource.data[field] == request.resource.data[field]
    }
  }
}
